{
    "sourceFile": "FrontEnd/src/Screens/GerenciarAvaliacao.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1716319126523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1716319373999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,201 @@\n+import React, { useState, useEffect } from \"react\";\r\n+import { View, StyleSheet, Text, TouchableOpacity, Picker, ScrollView } from \"react-native\";\r\n+import {\r\n+  TextField,\r\n+  Typography,\r\n+  Breadcrumbs,\r\n+  Link,\r\n+  Table,\r\n+  TableBody,\r\n+  TableCell,\r\n+  TableContainer,\r\n+  TableHead,\r\n+  TableRow,\r\n+  Paper,\r\n+  Button,\r\n+  InputLabel,\r\n+  MenuItem,\r\n+  Select,\r\n+} from \"@mui/material\";\r\n+import axios from \"axios\";\r\n+import TemplateCrud from \"../Components/TemplateCrud\";\r\n+\r\n+\r\n+const GerenciarAvaliacao = ({ navigation }) => {\r\n+  const [curso, setCursoId] = useState(\"\");\r\n+  const [cursos, setCursos] = useState([]);\r\n+  const [turma, setTurmaId] = useState(\"\");\r\n+  const [turmas, setTurmas] = useState([]);\r\n+  const [uc, setUCId] = useState(\"\");\r\n+  const [ucs, setUCs] = useState([]);\r\n+  const [isLoading, setIsLoading] = useState(true);\r\n+\r\n+\r\n+\r\n+  const fetchCursos = async () => {\r\n+    try {\r\n+      const response = await axios.get(\"http://localhost:8080/curso\");\r\n+      setCursos(response.data);\r\n+    } catch (error) {\r\n+      console.error(\"Erro ao obter cursos:\", error);\r\n+    }\r\n+  };\r\n+\r\n+  const fetchUCs = async () => {\r\n+    try {\r\n+      const response = await axios.get(\"http://localhost:8080/uc\");\r\n+      setUCs(response.data);\r\n+    } catch (error) {\r\n+      console.error(\"Erro ao obter uc:\", error);\r\n+    }\r\n+  };\r\n+\r\n+  const fetchTurmas = async () => {\r\n+    try {\r\n+      const response = await axios.get(\"http://localhost:8080/turma\");\r\n+      setTurmas(response.data);\r\n+    } catch (error) {\r\n+      console.error(\"Erro ao obter turmas:\", error);\r\n+    }\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const fetchData = async () => {\r\n+      setIsLoading(true);\r\n+      await Promise.all([fetchCursos(), fetchTurmas(), fetchUCs()]);\r\n+      setIsLoading(false);\r\n+    };\r\n+    fetchData();\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <ScrollView>\r\n+    <TemplateCrud>\r\n+      <View style={styles.mainContainer}>\r\n+        <View style={styles.breadcrumbsContainer}>\r\n+        </View>\r\n+        <View style={styles.contentContainer}>\r\n+          <View style={styles.formContainer}>\r\n+            <Typography\r\n+              variant=\"h6\"\r\n+              noWrap\r\n+              component=\"div\"\r\n+              style={styles.title}>\r\n+              Relatório do Aluno \r\n+            </Typography>\r\n+\r\n+            <Select\r\n+              labelId=\"aluno-select-curso\"\r\n+              id=\"curso-select\"\r\n+              value={curso}\r\n+              onChange={(e) => setCursoId(e.target.value)}\r\n+              sx={{ marginBottom: \"20px\" }}\r\n+              displayEmpty\r\n+            >\r\n+              <MenuItem value=\"\" disabled>\r\n+                Selecionar Curso\r\n+              </MenuItem>\r\n+              {cursos.map((curso) => (\r\n+                <MenuItem key={curso.id} value={curso.id}>\r\n+                  {curso.nome}\r\n+                </MenuItem>\r\n+              ))}\r\n+            </Select>\r\n+\r\n+\r\n+            <Select\r\n+              labelId=\"turma-select-curso\"\r\n+              id=\"turma-select\"\r\n+              value={turma}\r\n+              onChange={(e) => setTurmaId(e.target.value)}\r\n+              sx={{ marginBottom: \"20px\" }}\r\n+              displayEmpty\r\n+            >\r\n+              <MenuItem value=\"\" disabled>\r\n+                Selecionar Turma\r\n+              </MenuItem>\r\n+              {turmas.map((turma) => (\r\n+                <MenuItem key={turma.id} value={turma.id}>\r\n+                  {turma.nome}\r\n+                </MenuItem>\r\n+              ))}\r\n+            </Select>\r\n+\r\n+\r\n+            <Select\r\n+              labelId=\"uc-select-curso\"\r\n+              id=\"uc-select\"\r\n+              value={uc}\r\n+              onChange={(e) => setUCId(e.target.value)}\r\n+              sx={{ marginBottom: \"20px\" }}\r\n+              displayEmpty\r\n+            >\r\n+              <MenuItem value=\"\" disabled>\r\n+                Selecionar UC\r\n+              </MenuItem>\r\n+              {ucs.map((uc) => (\r\n+                <MenuItem key={uc.id} value={uc.id}>\r\n+                  {uc.nome}\r\n+                </MenuItem>\r\n+              ))}\r\n+            </Select>\r\n+\r\n+\r\n+\r\n+          </View>\r\n+          <View style={styles.tableContainer}>\r\n+            <TableContainer component={Paper}>\r\n+              <Table>\r\n+                <TableHead>\r\n+                  <TableRow>\r\n+                    <TableCell>Nome</TableCell>\r\n+                    <TableCell>Nivel</TableCell>\r\n+                    <TableCell>Carga Horaria</TableCell>\r\n+                    <TableCell>Ação</TableCell>\r\n+                    \r\n+                  </TableRow>\r\n+                </TableHead>\r\n+              </Table>\r\n+            </TableContainer>\r\n+          </View>\r\n+        </View>\r\n+      </View>\r\n+    </TemplateCrud>\r\n+    </ScrollView>\r\n+  );\r\n+};\r\n+\r\n+const styles = StyleSheet.create({\r\n+  mainContainer: {\r\n+    flex: 1,\r\n+    padding: 10,\r\n+  },\r\n+  breadcrumbsContainer: {\r\n+    marginBottom: 10,\r\n+  },\r\n+  contentContainer: {\r\n+    flex: 1,\r\n+    flexDirection: \"row\",\r\n+  },\r\n+  formContainer: {\r\n+    flex: 1,\r\n+    padding: 20,\r\n+  },\r\n+  tableContainer: {\r\n+    flex: 1,\r\n+    padding: 20,\r\n+  },\r\n+  title: {\r\n+    marginBottom: 20,\r\n+  },\r\n+  input: {\r\n+    marginBottom: 20,\r\n+  },\r\n+  button: {\r\n+    marginTop: 10,\r\n+  },\r\n+});\r\n+\r\n+\r\n+\r\n+export default GerenciarAvaliacao;\r\n"
                },
                {
                    "date": 1716319440920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,201 @@\n+import React, { useState, useEffect } from \"react\";\r\n+import { View, StyleSheet, Text, TouchableOpacity, Picker, ScrollView } from \"react-native\";\r\n+import {\r\n+  TextField,\r\n+  Typography,\r\n+  Breadcrumbs,\r\n+  Link,\r\n+  Table,\r\n+  TableBody,\r\n+  TableCell,\r\n+  TableContainer,\r\n+  TableHead,\r\n+  TableRow,\r\n+  Paper,\r\n+  Button,\r\n+  InputLabel,\r\n+  MenuItem,\r\n+  Select,\r\n+} from \"@mui/material\";\r\n+import axios from \"axios\";\r\n+import TemplateCrud from \"../Components/TemplateCrud\";\r\n+\r\n+\r\n+const GerenciarAvaliacao = ({ navigation }) => {\r\n+  const [curso, setCursoId] = useState(\"\");\r\n+  const [cursos, setCursos] = useState([]);\r\n+  const [turma, setTurmaId] = useState(\"\");\r\n+  const [turmas, setTurmas] = useState([]);\r\n+  const [uc, setUCId] = useState(\"\");\r\n+  const [ucs, setUCs] = useState([]);\r\n+  const [isLoading, setIsLoading] = useState(true);\r\n+\r\n+\r\n+\r\n+  const fetchCursos = async () => {\r\n+    try {\r\n+      const response = await axios.get(\"http://localhost:8080/curso\");\r\n+      setCursos(response.data);\r\n+    } catch (error) {\r\n+      console.error(\"Erro ao obter cursos:\", error);\r\n+    }\r\n+  };\r\n+\r\n+  const fetchUCs = async () => {\r\n+    try {\r\n+      const response = await axios.get(\"http://localhost:8080/uc\");\r\n+      setUCs(response.data);\r\n+    } catch (error) {\r\n+      console.error(\"Erro ao obter uc:\", error);\r\n+    }\r\n+  };\r\n+\r\n+  const fetchTurmas = async () => {\r\n+    try {\r\n+      const response = await axios.get(\"http://localhost:8080/turma\");\r\n+      setTurmas(response.data);\r\n+    } catch (error) {\r\n+      console.error(\"Erro ao obter turmas:\", error);\r\n+    }\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const fetchData = async () => {\r\n+      setIsLoading(true);\r\n+      await Promise.all([fetchCursos(), fetchTurmas(), fetchUCs()]);\r\n+      setIsLoading(false);\r\n+    };\r\n+    fetchData();\r\n+  }, []);\r\n+\r\n+  return (\r\n+    <ScrollView>\r\n+    <TemplateCrud>\r\n+      <View style={styles.mainContainer}>\r\n+        <View style={styles.breadcrumbsContainer}>\r\n+        </View>\r\n+        <View style={styles.contentContainer}>\r\n+          <View style={styles.formContainer}>\r\n+            <Typography\r\n+              variant=\"h6\"\r\n+              noWrap\r\n+              component=\"div\"\r\n+              style={styles.title}>\r\n+              Gerenciar Avaliação\r\n+            </Typography>\r\n+\r\n+            <Select\r\n+              labelId=\"aluno-select-curso\"\r\n+              id=\"curso-select\"\r\n+              value={curso}\r\n+              onChange={(e) => setCursoId(e.target.value)}\r\n+              sx={{ marginBottom: \"20px\" }}\r\n+              displayEmpty\r\n+            >\r\n+              <MenuItem value=\"\" disabled>\r\n+                Selecionar Curso\r\n+              </MenuItem>\r\n+              {cursos.map((curso) => (\r\n+                <MenuItem key={curso.id} value={curso.id}>\r\n+                  {curso.nome}\r\n+                </MenuItem>\r\n+              ))}\r\n+            </Select>\r\n+\r\n+\r\n+            <Select\r\n+              labelId=\"turma-select-curso\"\r\n+              id=\"turma-select\"\r\n+              value={turma}\r\n+              onChange={(e) => setTurmaId(e.target.value)}\r\n+              sx={{ marginBottom: \"20px\" }}\r\n+              displayEmpty\r\n+            >\r\n+              <MenuItem value=\"\" disabled>\r\n+                Selecionar Turma\r\n+              </MenuItem>\r\n+              {turmas.map((turma) => (\r\n+                <MenuItem key={turma.id} value={turma.id}>\r\n+                  {turma.nome}\r\n+                </MenuItem>\r\n+              ))}\r\n+            </Select>\r\n+\r\n+\r\n+            <Select\r\n+              labelId=\"uc-select-curso\"\r\n+              id=\"uc-select\"\r\n+              value={uc}\r\n+              onChange={(e) => setUCId(e.target.value)}\r\n+              sx={{ marginBottom: \"20px\" }}\r\n+              displayEmpty\r\n+            >\r\n+              <MenuItem value=\"\" disabled>\r\n+                Selecionar UC\r\n+              </MenuItem>\r\n+              {ucs.map((uc) => (\r\n+                <MenuItem key={uc.id} value={uc.id}>\r\n+                  {uc.nome}\r\n+                </MenuItem>\r\n+              ))}\r\n+            </Select>\r\n+\r\n+\r\n+\r\n+          </View>\r\n+          <View style={styles.tableContainer}>\r\n+            <TableContainer component={Paper}>\r\n+              <Table>\r\n+                <TableHead>\r\n+                  <TableRow>\r\n+                    <TableCell>Nome</TableCell>\r\n+                    <TableCell>Nivel</TableCell>\r\n+                    <TableCell>Carga Horaria</TableCell>\r\n+                    <TableCell>Ação</TableCell>\r\n+                    \r\n+                  </TableRow>\r\n+                </TableHead>\r\n+              </Table>\r\n+            </TableContainer>\r\n+          </View>\r\n+        </View>\r\n+      </View>\r\n+    </TemplateCrud>\r\n+    </ScrollView>\r\n+  );\r\n+};\r\n+\r\n+const styles = StyleSheet.create({\r\n+  mainContainer: {\r\n+    flex: 1,\r\n+    padding: 10,\r\n+  },\r\n+  breadcrumbsContainer: {\r\n+    marginBottom: 10,\r\n+  },\r\n+  contentContainer: {\r\n+    flex: 1,\r\n+    flexDirection: \"row\",\r\n+  },\r\n+  formContainer: {\r\n+    flex: 1,\r\n+    padding: 20,\r\n+  },\r\n+  tableContainer: {\r\n+    flex: 1,\r\n+    padding: 20,\r\n+  },\r\n+  title: {\r\n+    marginBottom: 20,\r\n+  },\r\n+  input: {\r\n+    marginBottom: 20,\r\n+  },\r\n+  button: {\r\n+    marginTop: 10,\r\n+  },\r\n+});\r\n+\r\n+\r\n+\r\n+export default GerenciarAvaliacao;\r\n"
                }
            ],
            "date": 1716319126523,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\r\nimport { View, StyleSheet, Text, TouchableOpacity, Picker, ScrollView } from \"react-native\";\r\nimport {\r\n  TextField,\r\n  Typography,\r\n  Breadcrumbs,\r\n  Link,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Button,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n} from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport TemplateCrud from \"../Components/TemplateCrud\";\r\n\r\n\r\nconst GerenciarAvaliacao = ({ navigation }) => {\r\n  const [curso, setCursoId] = useState(\"\");\r\n  const [cursos, setCursos] = useState([]);\r\n  const [turma, setTurmaId] = useState(\"\");\r\n  const [turmas, setTurmas] = useState([]);\r\n  const [uc, setUCId] = useState(\"\");\r\n  const [ucs, setUCs] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n\r\n\r\n  const fetchCursos = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:8080/curso\");\r\n      setCursos(response.data);\r\n    } catch (error) {\r\n      console.error(\"Erro ao obter cursos:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchUCs = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:8080/uc\");\r\n      setUCs(response.data);\r\n    } catch (error) {\r\n      console.error(\"Erro ao obter uc:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchTurmas = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:8080/turma\");\r\n      setTurmas(response.data);\r\n    } catch (error) {\r\n      console.error(\"Erro ao obter turmas:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      await Promise.all([fetchCursos(), fetchTurmas(), fetchUCs()]);\r\n      setIsLoading(false);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"opa\");\r\n    console.log(UCList);\r\n  }, [UCList]);\r\n  \r\n\r\n  return (\r\n    <ScrollView>\r\n    <TemplateCrud>\r\n      <View style={styles.mainContainer}>\r\n        <View style={styles.breadcrumbsContainer}>\r\n        </View>\r\n        <View style={styles.contentContainer}>\r\n          <View style={styles.formContainer}>\r\n            <Typography\r\n              variant=\"h6\"\r\n              noWrap\r\n              component=\"div\"\r\n              style={styles.title}>\r\n              Relatório do Aluno \r\n            </Typography>\r\n\r\n            <Select\r\n              labelId=\"aluno-select-curso\"\r\n              id=\"curso-select\"\r\n              value={curso}\r\n              onChange={(e) => setCursoId(e.target.value)}\r\n              sx={{ marginBottom: \"20px\" }}\r\n              displayEmpty\r\n            >\r\n              <MenuItem value=\"\" disabled>\r\n                Selecionar Curso\r\n              </MenuItem>\r\n              {cursos.map((curso) => (\r\n                <MenuItem key={curso.id} value={curso.id}>\r\n                  {curso.nome}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n\r\n\r\n            <Select\r\n              labelId=\"turma-select-curso\"\r\n              id=\"turma-select\"\r\n              value={turma}\r\n              onChange={(e) => setTurmaId(e.target.value)}\r\n              sx={{ marginBottom: \"20px\" }}\r\n              displayEmpty\r\n            >\r\n              <MenuItem value=\"\" disabled>\r\n                Selecionar Turma\r\n              </MenuItem>\r\n              {turmas.map((turma) => (\r\n                <MenuItem key={turma.id} value={turma.id}>\r\n                  {turma.nome}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n\r\n\r\n            <Select\r\n              labelId=\"uc-select-curso\"\r\n              id=\"uc-select\"\r\n              value={uc}\r\n              onChange={(e) => setUCId(e.target.value)}\r\n              sx={{ marginBottom: \"20px\" }}\r\n              displayEmpty\r\n            >\r\n              <MenuItem value=\"\" disabled>\r\n                Selecionar UC\r\n              </MenuItem>\r\n              {ucs.map((uc) => (\r\n                <MenuItem key={uc.id} value={uc.id}>\r\n                  {uc.nome}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n\r\n\r\n\r\n          </View>\r\n          <View style={styles.tableContainer}>\r\n            <TableContainer component={Paper}>\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Nome</TableCell>\r\n                    <TableCell>Nivel</TableCell>\r\n                    <TableCell>Carga Horaria</TableCell>\r\n                    <TableCell>Ação</TableCell>\r\n                    \r\n                  </TableRow>\r\n                </TableHead>\r\n              </Table>\r\n            </TableContainer>\r\n          </View>\r\n        </View>\r\n      </View>\r\n    </TemplateCrud>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  mainContainer: {\r\n    flex: 1,\r\n    padding: 10,\r\n  },\r\n  breadcrumbsContainer: {\r\n    marginBottom: 10,\r\n  },\r\n  contentContainer: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n  },\r\n  formContainer: {\r\n    flex: 1,\r\n    padding: 20,\r\n  },\r\n  tableContainer: {\r\n    flex: 1,\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    marginBottom: 20,\r\n  },\r\n  input: {\r\n    marginBottom: 20,\r\n  },\r\n  button: {\r\n    marginTop: 10,\r\n  },\r\n});\r\n\r\n\r\n\r\nexport default GerenciarAvaliacao;\r\n"
        }
    ]
}